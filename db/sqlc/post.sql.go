// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: post.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const addCommentToPost = `-- name: AddCommentToPost :exec
UPDATE posts SET comments_ids = array_append(comments_ids, $2)
WHERE id = $1
`

type AddCommentToPostParams struct {
	ID          int32       `json:"id"`
	ArrayAppend interface{} `json:"array_append"`
}

func (q *Queries) AddCommentToPost(ctx context.Context, arg AddCommentToPostParams) error {
	_, err := q.exec(ctx, q.addCommentToPostStmt, addCommentToPost, arg.ID, arg.ArrayAppend)
	return err
}

const addLikeToPost = `-- name: AddLikeToPost :exec
UPDATE posts SET likes_ids = array_append(likes_ids, $2)
WHERE id = $1
`

type AddLikeToPostParams struct {
	ID          int32       `json:"id"`
	ArrayAppend interface{} `json:"array_append"`
}

func (q *Queries) AddLikeToPost(ctx context.Context, arg AddLikeToPostParams) error {
	_, err := q.exec(ctx, q.addLikeToPostStmt, addLikeToPost, arg.ID, arg.ArrayAppend)
	return err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
title,
body,
user_id,
likes_ids,
comments_ids,
status
) VALUES (
$1, $2, $3, $4, $5, $6
) RETURNING id, title, body, likes_ids, comments_ids, user_id, status, created_at
`

type CreatePostParams struct {
	Title       sql.NullString `json:"title"`
	Body        sql.NullString `json:"body"`
	UserID      int32          `json:"user_id"`
	LikesIds    []int32        `json:"likes_ids"`
	CommentsIds []int32        `json:"comments_ids"`
	Status      string         `json:"status"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.createPostStmt, createPost,
		arg.Title,
		arg.Body,
		arg.UserID,
		pq.Array(arg.LikesIds),
		pq.Array(arg.CommentsIds),
		arg.Status,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		pq.Array(&i.LikesIds),
		pq.Array(&i.CommentsIds),
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deletePostStmt, deletePost, id)
	return err
}

const deleteUserPosts = `-- name: DeleteUserPosts :exec
DELETE FROM posts WHERE user_id = $1
`

func (q *Queries) DeleteUserPosts(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.deleteUserPostsStmt, deleteUserPosts, userID)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, title, body, likes_ids, comments_ids, user_id, status, created_at FROM posts 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int32) (Post, error) {
	row := q.queryRow(ctx, q.getPostStmt, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		pq.Array(&i.LikesIds),
		pq.Array(&i.CommentsIds),
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, title, body, likes_ids, comments_ids, user_id, status, created_at FROM posts
LIMIT $1 OFFSET $2
`

type GetPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsStmt, getPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			pq.Array(&i.LikesIds),
			pq.Array(&i.CommentsIds),
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostsByUserId = `-- name: ListPostsByUserId :many
SELECT id, title, body, likes_ids, comments_ids, user_id, status, created_at FROM posts
WHERE user_id = $1
`

func (q *Queries) ListPostsByUserId(ctx context.Context, userID int32) ([]Post, error) {
	rows, err := q.query(ctx, q.listPostsByUserIdStmt, listPostsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			pq.Array(&i.LikesIds),
			pq.Array(&i.CommentsIds),
			&i.UserID,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCommentFromPost = `-- name: RemoveCommentFromPost :exec
UPDATE posts SET comments_ids = array_remove(comments_ids, $2)
WHERE id = $1
`

type RemoveCommentFromPostParams struct {
	ID          int32       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) RemoveCommentFromPost(ctx context.Context, arg RemoveCommentFromPostParams) error {
	_, err := q.exec(ctx, q.removeCommentFromPostStmt, removeCommentFromPost, arg.ID, arg.ArrayRemove)
	return err
}

const removeLikeFromPost = `-- name: RemoveLikeFromPost :exec
UPDATE posts SET likes_ids = array_remove(likes_ids, $2)
WHERE id = $1
`

type RemoveLikeFromPostParams struct {
	ID          int32       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) RemoveLikeFromPost(ctx context.Context, arg RemoveLikeFromPostParams) error {
	_, err := q.exec(ctx, q.removeLikeFromPostStmt, removeLikeFromPost, arg.ID, arg.ArrayRemove)
	return err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts SET
title = $2,
body = $3
WHERE id = $1
RETURNING id, title, body, likes_ids, comments_ids, user_id, status, created_at
`

type UpdatePostParams struct {
	ID    int32          `json:"id"`
	Title sql.NullString `json:"title"`
	Body  sql.NullString `json:"body"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.updatePostStmt, updatePost, arg.ID, arg.Title, arg.Body)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		pq.Array(&i.LikesIds),
		pq.Array(&i.CommentsIds),
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updatePostBody = `-- name: UpdatePostBody :one
UPDATE posts SET
body = $2
WHERE id = $1
RETURNING id, title, body, likes_ids, comments_ids, user_id, status, created_at
`

type UpdatePostBodyParams struct {
	ID   int32          `json:"id"`
	Body sql.NullString `json:"body"`
}

func (q *Queries) UpdatePostBody(ctx context.Context, arg UpdatePostBodyParams) (Post, error) {
	row := q.queryRow(ctx, q.updatePostBodyStmt, updatePostBody, arg.ID, arg.Body)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		pq.Array(&i.LikesIds),
		pq.Array(&i.CommentsIds),
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updatePostTitle = `-- name: UpdatePostTitle :one
UPDATE posts SET
title = $2
WHERE id = $1
RETURNING id, title, body, likes_ids, comments_ids, user_id, status, created_at
`

type UpdatePostTitleParams struct {
	ID    int32          `json:"id"`
	Title sql.NullString `json:"title"`
}

func (q *Queries) UpdatePostTitle(ctx context.Context, arg UpdatePostTitleParams) (Post, error) {
	row := q.queryRow(ctx, q.updatePostTitleStmt, updatePostTitle, arg.ID, arg.Title)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Body,
		pq.Array(&i.LikesIds),
		pq.Array(&i.CommentsIds),
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
