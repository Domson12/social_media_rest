// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: likes.sql

package db

import (
	"context"
)

const getLikes = `-- name: GetLikes :many
SELECT id, post_id, user_id, created_at FROM likes
`

func (q *Queries) GetLikes(ctx context.Context) ([]Like, error) {
	rows, err := q.query(ctx, q.getLikesStmt, getLikes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLikesByPostId = `-- name: GetLikesByPostId :many
SELECT id, post_id, user_id, created_at FROM likes 
WHERE post_id = $1
`

func (q *Queries) GetLikesByPostId(ctx context.Context, postID int32) ([]Like, error) {
	rows, err := q.query(ctx, q.getLikesByPostIdStmt, getLikesByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLikesByUserId = `-- name: GetLikesByUserId :many
SELECT id, post_id, user_id, created_at FROM likes
WHERE user_id = $1
`

func (q *Queries) GetLikesByUserId(ctx context.Context, userID int32) ([]Like, error) {
	rows, err := q.query(ctx, q.getLikesByUserIdStmt, getLikesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const likePost = `-- name: LikePost :exec
INSERT INTO likes (post_id, user_id) 
VALUES ($1, $2)
`

type LikePostParams struct {
	PostID int32 `json:"post_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) error {
	_, err := q.exec(ctx, q.likePostStmt, likePost, arg.PostID, arg.UserID)
	return err
}

const unlikePost = `-- name: UnlikePost :exec
DELETE FROM likes 
WHERE post_id = $1 
AND user_id = $2
`

type UnlikePostParams struct {
	PostID int32 `json:"post_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) UnlikePost(ctx context.Context, arg UnlikePostParams) error {
	_, err := q.exec(ctx, q.unlikePostStmt, unlikePost, arg.PostID, arg.UserID)
	return err
}
