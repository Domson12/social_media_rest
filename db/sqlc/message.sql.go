// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: message.sql

package db

import (
	"context"
	"database/sql"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
sender_user_id,
receiver_user_id,
chat_room_id,
text,
status
) VALUES (
$1, $2, $3, $4, $5
) RETURNING id, chat_room_id, sender_user_id, receiver_user_id, text, created_at, status
`

type CreateMessageParams struct {
	SenderUserID   int32          `json:"sender_user_id"`
	ReceiverUserID int32          `json:"receiver_user_id"`
	ChatRoomID     int32          `json:"chat_room_id"`
	Text           sql.NullString `json:"text"`
	Status         string         `json:"status"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.createMessageStmt, createMessage,
		arg.SenderUserID,
		arg.ReceiverUserID,
		arg.ChatRoomID,
		arg.Text,
		arg.Status,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.SenderUserID,
		&i.ReceiverUserID,
		&i.Text,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteMessageStmt, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, chat_room_id, sender_user_id, receiver_user_id, text, created_at, status FROM messages 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int32) (Message, error) {
	row := q.queryRow(ctx, q.getMessageStmt, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.SenderUserID,
		&i.ReceiverUserID,
		&i.Text,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id, chat_room_id, sender_user_id, receiver_user_id, text, created_at, status FROM messages
LIMIT $1 OFFSET $2
`

type GetMessagesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetMessages(ctx context.Context, arg GetMessagesParams) ([]Message, error) {
	rows, err := q.query(ctx, q.getMessagesStmt, getMessages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ChatRoomID,
			&i.SenderUserID,
			&i.ReceiverUserID,
			&i.Text,
			&i.CreatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages SET
text = $1,
status = $2
WHERE id = $3 RETURNING id, chat_room_id, sender_user_id, receiver_user_id, text, created_at, status
`

type UpdateMessageParams struct {
	Text   sql.NullString `json:"text"`
	Status string         `json:"status"`
	ID     int32          `json:"id"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.updateMessageStmt, updateMessage, arg.Text, arg.Status, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ChatRoomID,
		&i.SenderUserID,
		&i.ReceiverUserID,
		&i.Text,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}
