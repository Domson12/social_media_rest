// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addChatRoomParticipantStmt, err = db.PrepareContext(ctx, addChatRoomParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query AddChatRoomParticipant: %w", err)
	}
	if q.addCommentStmt, err = db.PrepareContext(ctx, addComment); err != nil {
		return nil, fmt.Errorf("error preparing query AddComment: %w", err)
	}
	if q.addCommentToPostStmt, err = db.PrepareContext(ctx, addCommentToPost); err != nil {
		return nil, fmt.Errorf("error preparing query AddCommentToPost: %w", err)
	}
	if q.addFollowStmt, err = db.PrepareContext(ctx, addFollow); err != nil {
		return nil, fmt.Errorf("error preparing query AddFollow: %w", err)
	}
	if q.addLikeToPostStmt, err = db.PrepareContext(ctx, addLikeToPost); err != nil {
		return nil, fmt.Errorf("error preparing query AddLikeToPost: %w", err)
	}
	if q.createChatRoomStmt, err = db.PrepareContext(ctx, createChatRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChatRoom: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createPostStmt, err = db.PrepareContext(ctx, createPost); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePost: %w", err)
	}
	if q.createReadReceiptStmt, err = db.PrepareContext(ctx, createReadReceipt); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReadReceipt: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteChatRoomStmt, err = db.PrepareContext(ctx, deleteChatRoom); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteChatRoom: %w", err)
	}
	if q.deleteChatRoomParticipantStmt, err = db.PrepareContext(ctx, deleteChatRoomParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteChatRoomParticipant: %w", err)
	}
	if q.deleteCommentStmt, err = db.PrepareContext(ctx, deleteComment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteComment: %w", err)
	}
	if q.deleteMessageStmt, err = db.PrepareContext(ctx, deleteMessage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMessage: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, deletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getChatRoomStmt, err = db.PrepareContext(ctx, getChatRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetChatRoom: %w", err)
	}
	if q.getChatRoomParticipantStmt, err = db.PrepareContext(ctx, getChatRoomParticipant); err != nil {
		return nil, fmt.Errorf("error preparing query GetChatRoomParticipant: %w", err)
	}
	if q.getChatRoomParticipantsStmt, err = db.PrepareContext(ctx, getChatRoomParticipants); err != nil {
		return nil, fmt.Errorf("error preparing query GetChatRoomParticipants: %w", err)
	}
	if q.getChatRoomsStmt, err = db.PrepareContext(ctx, getChatRooms); err != nil {
		return nil, fmt.Errorf("error preparing query GetChatRooms: %w", err)
	}
	if q.getCommentStmt, err = db.PrepareContext(ctx, getComment); err != nil {
		return nil, fmt.Errorf("error preparing query GetComment: %w", err)
	}
	if q.getCommentsStmt, err = db.PrepareContext(ctx, getComments); err != nil {
		return nil, fmt.Errorf("error preparing query GetComments: %w", err)
	}
	if q.getLikesStmt, err = db.PrepareContext(ctx, getLikes); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikes: %w", err)
	}
	if q.getLikesByPostIdStmt, err = db.PrepareContext(ctx, getLikesByPostId); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesByPostId: %w", err)
	}
	if q.getLikesByUserIdStmt, err = db.PrepareContext(ctx, getLikesByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesByUserId: %w", err)
	}
	if q.getMessageStmt, err = db.PrepareContext(ctx, getMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessage: %w", err)
	}
	if q.getMessagesStmt, err = db.PrepareContext(ctx, getMessages); err != nil {
		return nil, fmt.Errorf("error preparing query GetMessages: %w", err)
	}
	if q.getPostStmt, err = db.PrepareContext(ctx, getPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetPost: %w", err)
	}
	if q.getPostsStmt, err = db.PrepareContext(ctx, getPosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetPosts: %w", err)
	}
	if q.getReadReceiptStmt, err = db.PrepareContext(ctx, getReadReceipt); err != nil {
		return nil, fmt.Errorf("error preparing query GetReadReceipt: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.likePostStmt, err = db.PrepareContext(ctx, likePost); err != nil {
		return nil, fmt.Errorf("error preparing query LikePost: %w", err)
	}
	if q.removeCommentFromPostStmt, err = db.PrepareContext(ctx, removeCommentFromPost); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveCommentFromPost: %w", err)
	}
	if q.removeFollowStmt, err = db.PrepareContext(ctx, removeFollow); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveFollow: %w", err)
	}
	if q.removeLikeFromPostStmt, err = db.PrepareContext(ctx, removeLikeFromPost); err != nil {
		return nil, fmt.Errorf("error preparing query RemoveLikeFromPost: %w", err)
	}
	if q.unlikePostStmt, err = db.PrepareContext(ctx, unlikePost); err != nil {
		return nil, fmt.Errorf("error preparing query UnlikePost: %w", err)
	}
	if q.updateChatRoomStmt, err = db.PrepareContext(ctx, updateChatRoom); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateChatRoom: %w", err)
	}
	if q.updateCommentStmt, err = db.PrepareContext(ctx, updateComment); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateComment: %w", err)
	}
	if q.updateMessageStmt, err = db.PrepareContext(ctx, updateMessage); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMessage: %w", err)
	}
	if q.updatePostStmt, err = db.PrepareContext(ctx, updatePost); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePost: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addChatRoomParticipantStmt != nil {
		if cerr := q.addChatRoomParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addChatRoomParticipantStmt: %w", cerr)
		}
	}
	if q.addCommentStmt != nil {
		if cerr := q.addCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addCommentStmt: %w", cerr)
		}
	}
	if q.addCommentToPostStmt != nil {
		if cerr := q.addCommentToPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addCommentToPostStmt: %w", cerr)
		}
	}
	if q.addFollowStmt != nil {
		if cerr := q.addFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addFollowStmt: %w", cerr)
		}
	}
	if q.addLikeToPostStmt != nil {
		if cerr := q.addLikeToPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addLikeToPostStmt: %w", cerr)
		}
	}
	if q.createChatRoomStmt != nil {
		if cerr := q.createChatRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChatRoomStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createPostStmt != nil {
		if cerr := q.createPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostStmt: %w", cerr)
		}
	}
	if q.createReadReceiptStmt != nil {
		if cerr := q.createReadReceiptStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReadReceiptStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteChatRoomStmt != nil {
		if cerr := q.deleteChatRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteChatRoomStmt: %w", cerr)
		}
	}
	if q.deleteChatRoomParticipantStmt != nil {
		if cerr := q.deleteChatRoomParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteChatRoomParticipantStmt: %w", cerr)
		}
	}
	if q.deleteCommentStmt != nil {
		if cerr := q.deleteCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCommentStmt: %w", cerr)
		}
	}
	if q.deleteMessageStmt != nil {
		if cerr := q.deleteMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMessageStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getChatRoomStmt != nil {
		if cerr := q.getChatRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChatRoomStmt: %w", cerr)
		}
	}
	if q.getChatRoomParticipantStmt != nil {
		if cerr := q.getChatRoomParticipantStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChatRoomParticipantStmt: %w", cerr)
		}
	}
	if q.getChatRoomParticipantsStmt != nil {
		if cerr := q.getChatRoomParticipantsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChatRoomParticipantsStmt: %w", cerr)
		}
	}
	if q.getChatRoomsStmt != nil {
		if cerr := q.getChatRoomsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChatRoomsStmt: %w", cerr)
		}
	}
	if q.getCommentStmt != nil {
		if cerr := q.getCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommentStmt: %w", cerr)
		}
	}
	if q.getCommentsStmt != nil {
		if cerr := q.getCommentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommentsStmt: %w", cerr)
		}
	}
	if q.getLikesStmt != nil {
		if cerr := q.getLikesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesStmt: %w", cerr)
		}
	}
	if q.getLikesByPostIdStmt != nil {
		if cerr := q.getLikesByPostIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesByPostIdStmt: %w", cerr)
		}
	}
	if q.getLikesByUserIdStmt != nil {
		if cerr := q.getLikesByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesByUserIdStmt: %w", cerr)
		}
	}
	if q.getMessageStmt != nil {
		if cerr := q.getMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessageStmt: %w", cerr)
		}
	}
	if q.getMessagesStmt != nil {
		if cerr := q.getMessagesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMessagesStmt: %w", cerr)
		}
	}
	if q.getPostStmt != nil {
		if cerr := q.getPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostStmt: %w", cerr)
		}
	}
	if q.getPostsStmt != nil {
		if cerr := q.getPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsStmt: %w", cerr)
		}
	}
	if q.getReadReceiptStmt != nil {
		if cerr := q.getReadReceiptStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReadReceiptStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.likePostStmt != nil {
		if cerr := q.likePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing likePostStmt: %w", cerr)
		}
	}
	if q.removeCommentFromPostStmt != nil {
		if cerr := q.removeCommentFromPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeCommentFromPostStmt: %w", cerr)
		}
	}
	if q.removeFollowStmt != nil {
		if cerr := q.removeFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeFollowStmt: %w", cerr)
		}
	}
	if q.removeLikeFromPostStmt != nil {
		if cerr := q.removeLikeFromPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing removeLikeFromPostStmt: %w", cerr)
		}
	}
	if q.unlikePostStmt != nil {
		if cerr := q.unlikePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unlikePostStmt: %w", cerr)
		}
	}
	if q.updateChatRoomStmt != nil {
		if cerr := q.updateChatRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateChatRoomStmt: %w", cerr)
		}
	}
	if q.updateCommentStmt != nil {
		if cerr := q.updateCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCommentStmt: %w", cerr)
		}
	}
	if q.updateMessageStmt != nil {
		if cerr := q.updateMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMessageStmt: %w", cerr)
		}
	}
	if q.updatePostStmt != nil {
		if cerr := q.updatePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePostStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	addChatRoomParticipantStmt    *sql.Stmt
	addCommentStmt                *sql.Stmt
	addCommentToPostStmt          *sql.Stmt
	addFollowStmt                 *sql.Stmt
	addLikeToPostStmt             *sql.Stmt
	createChatRoomStmt            *sql.Stmt
	createMessageStmt             *sql.Stmt
	createPostStmt                *sql.Stmt
	createReadReceiptStmt         *sql.Stmt
	createUserStmt                *sql.Stmt
	deleteChatRoomStmt            *sql.Stmt
	deleteChatRoomParticipantStmt *sql.Stmt
	deleteCommentStmt             *sql.Stmt
	deleteMessageStmt             *sql.Stmt
	deletePostStmt                *sql.Stmt
	deleteUserStmt                *sql.Stmt
	getChatRoomStmt               *sql.Stmt
	getChatRoomParticipantStmt    *sql.Stmt
	getChatRoomParticipantsStmt   *sql.Stmt
	getChatRoomsStmt              *sql.Stmt
	getCommentStmt                *sql.Stmt
	getCommentsStmt               *sql.Stmt
	getLikesStmt                  *sql.Stmt
	getLikesByPostIdStmt          *sql.Stmt
	getLikesByUserIdStmt          *sql.Stmt
	getMessageStmt                *sql.Stmt
	getMessagesStmt               *sql.Stmt
	getPostStmt                   *sql.Stmt
	getPostsStmt                  *sql.Stmt
	getReadReceiptStmt            *sql.Stmt
	getUserStmt                   *sql.Stmt
	getUserByEmailStmt            *sql.Stmt
	getUserByUsernameStmt         *sql.Stmt
	getUsersStmt                  *sql.Stmt
	likePostStmt                  *sql.Stmt
	removeCommentFromPostStmt     *sql.Stmt
	removeFollowStmt              *sql.Stmt
	removeLikeFromPostStmt        *sql.Stmt
	unlikePostStmt                *sql.Stmt
	updateChatRoomStmt            *sql.Stmt
	updateCommentStmt             *sql.Stmt
	updateMessageStmt             *sql.Stmt
	updatePostStmt                *sql.Stmt
	updateUserStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		addChatRoomParticipantStmt:    q.addChatRoomParticipantStmt,
		addCommentStmt:                q.addCommentStmt,
		addCommentToPostStmt:          q.addCommentToPostStmt,
		addFollowStmt:                 q.addFollowStmt,
		addLikeToPostStmt:             q.addLikeToPostStmt,
		createChatRoomStmt:            q.createChatRoomStmt,
		createMessageStmt:             q.createMessageStmt,
		createPostStmt:                q.createPostStmt,
		createReadReceiptStmt:         q.createReadReceiptStmt,
		createUserStmt:                q.createUserStmt,
		deleteChatRoomStmt:            q.deleteChatRoomStmt,
		deleteChatRoomParticipantStmt: q.deleteChatRoomParticipantStmt,
		deleteCommentStmt:             q.deleteCommentStmt,
		deleteMessageStmt:             q.deleteMessageStmt,
		deletePostStmt:                q.deletePostStmt,
		deleteUserStmt:                q.deleteUserStmt,
		getChatRoomStmt:               q.getChatRoomStmt,
		getChatRoomParticipantStmt:    q.getChatRoomParticipantStmt,
		getChatRoomParticipantsStmt:   q.getChatRoomParticipantsStmt,
		getChatRoomsStmt:              q.getChatRoomsStmt,
		getCommentStmt:                q.getCommentStmt,
		getCommentsStmt:               q.getCommentsStmt,
		getLikesStmt:                  q.getLikesStmt,
		getLikesByPostIdStmt:          q.getLikesByPostIdStmt,
		getLikesByUserIdStmt:          q.getLikesByUserIdStmt,
		getMessageStmt:                q.getMessageStmt,
		getMessagesStmt:               q.getMessagesStmt,
		getPostStmt:                   q.getPostStmt,
		getPostsStmt:                  q.getPostsStmt,
		getReadReceiptStmt:            q.getReadReceiptStmt,
		getUserStmt:                   q.getUserStmt,
		getUserByEmailStmt:            q.getUserByEmailStmt,
		getUserByUsernameStmt:         q.getUserByUsernameStmt,
		getUsersStmt:                  q.getUsersStmt,
		likePostStmt:                  q.likePostStmt,
		removeCommentFromPostStmt:     q.removeCommentFromPostStmt,
		removeFollowStmt:              q.removeFollowStmt,
		removeLikeFromPostStmt:        q.removeLikeFromPostStmt,
		unlikePostStmt:                q.unlikePostStmt,
		updateChatRoomStmt:            q.updateChatRoomStmt,
		updateCommentStmt:             q.updateCommentStmt,
		updateMessageStmt:             q.updateMessageStmt,
		updatePostStmt:                q.updatePostStmt,
		updateUserStmt:                q.updateUserStmt,
	}
}
